#!/usr/bin/python


import os
import platform

Import('env')

lib_name = 'messages'

src_dir = Dir('.').abspath

#===============================================================================
flatbuffers_sources = Glob(os.path.join(src_dir, 'src/*.fbs'))
                      
if not env.GetOption('clean'):
    to_dir_cpp = os.path.join(src_dir, 'include', 'messages');
    to_dir_csharp = os.path.join(src_dir, 'src');
    for file in flatbuffers_sources:
        env.Command(os.path.join(to_dir_cpp, file.name.split('.')[0] + '_generated.h'), file, ''.join([os.path.join(env['EXTERNALS_BUILD_DIR'], 'flatbuffers', 'bin', 'flatc'), ' --cpp --scoped-enums --gen-all --gen-mutable -o ', to_dir_cpp, ' $SOURCE']))
        env.Command(os.path.join(to_dir_csharp, file.name.split('.')[0] + '.cs'), file, ''.join([os.path.join(env['EXTERNALS_BUILD_DIR'], 'flatbuffers', 'bin', 'flatc'), ' --csharp --scoped-enums --gen-all --gen-mutable --gen-onefile -o ', to_dir_csharp, ' $SOURCE']))

#===============================================================================
cpp_sources = [
                Glob(os.path.join(src_dir, 'src', '*.cpp')),
              ]

cpp_libs = [
         #'boost_system',
         #'boost_thread',
         #'boost_regex',
         #'boost_coroutine',
         #'http_parser',
         #'pthread',
         'gomp',
         'aux',
         'mgl',
       ]

cs_sources = [
                Glob(os.path.join(src_dir, 'src', '*.cs')),
            ]

cs_refs = [
            #'System.Data',
            'FlatBuffers',
           ]
       
local_env = env.Clone()
if not platform.platform().startswith('Darwin'):
    cpp_libs.append(['tcmalloc'])
    local_env['CCFLAGS'].append(['-fno-builtin-malloc', '-fno-builtin-calloc', '-fno-builtin-realloc', '-fno-builtin-free'])


local_env["SHLIBSUFFIX"] = '.dll'
local_env["SHLIBPREFIX"] = ''

#===============================================================================
# Build
#messages_lib_cpp = local_env.SharedLibrary(lib_name, cpp_sources, LIBS = cpp_libs)
r = local_env.CLIRefs(cs_refs)
messages_lib_cs = local_env.CLIAssembly(lib_name, cs_sources, ASSEMBLYREFS = r)  #, VERSION = "1.0.0.0")


additional_clean_paths = [
                               Glob(os.path.join(src_dir, 'src/*.cs')),
                               Glob(os.path.join(src_dir, 'include/messages/*.h')),
                               Glob(os.path.join(src_dir, '*.dll')),
                          ]
local_env.Clean(messages_lib_cs, additional_clean_paths);

env['DEPENDENCIES']['common/message'] = messages_lib_cs

#SConscript(['test/sconscript'])

