#!/usr/bin/python

import os
import platform

Import('env')


src_dir = Dir('.').abspath


local_env = env.Clone()


#===============================================================================
schemetool_sources = [
                        [os.path.join(src_dir, 'orders_aggr.ini'), 'CustReplScheme', os.path.join(src_dir, 'orders_aggr.cgate.h')],
                     ]

if not env.GetOption('clean'):
    cgate_path = os.path.join(env['EXTERNALS_BUILD_DIR'], 'cgate')
    for elt in schemetool_sources:   
        if local_env.Execute(''.join(['export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:', os.path.join(cgate_path, 'lib'), '; ', os.path.join(cgate_path, 'bin', 'schemetool'), ' makesrc', ' -o ', elt[2], ' ', elt[0], ' ', elt[1]])):
            Exit(1)


#===============================================================================
# Uncomment the line below to enable Boost.Asio debug logging of async events
#local_env['CCFLAGS'].append(['-DBOOST_ASIO_ENABLE_HANDLER_TRACKING', '-Wno-unused-variable', '-Wno-unused-result'])
#===============================================================================


libs = [
         #'boost_regex',
         #'boost_system',
         #'boost_thread',
         #'boost_random',
         #'boost_filesystem',
         #'boost_date_time',
         #'boost_coroutine',
         #'boost_context',
         #'pthread',
         'aux',
         'cgate',
         'cgatepp',
       ]

etcs = [
            'orderbook-dumper.ini'
       ]


if not platform.platform().startswith('Darwin'):
    libs.append(['tcmalloc'])
    local_env['CCFLAGS'].append(['-fno-builtin-malloc', '-fno-builtin-calloc', '-fno-builtin-realloc', '-fno-builtin-free'])


#==================================== Build ===========================================
orderbook_dumper = local_env.Program('orderbook-dumper', ['orderbook-dumper.cpp'], LIBS = libs)
local_env.Install(os.path.join(env['STAGE_DIR'], 'bin'), orderbook_dumper)
local_env.Install(os.path.join(env['STAGE_DIR'], 'etc'), etcs)

additional_clean_paths = [
                           Glob(os.path.join(src_dir, '*.cgate.h')),
                         ]

env.Clean(orderbook_dumper, additional_clean_paths);



